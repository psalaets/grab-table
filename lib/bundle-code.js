const { rollup } = require('rollup');
const resolve = require('@rollup/plugin-node-resolve').default;
const terser = require('@rollup/plugin-terser').default;
const path = require('node:path');

/**
 * @typedef {Object} Settings
 * @property {boolean} verbose
 */

/**
 * @param {Settings} [settings]
 */
module.exports.bundleBookmarklet = function bundleBookmarklet(settings) {
  return bundleCode(path.join(__dirname, '../src/bookmarklet.js'), settings);
}

/**
 * @param {string} entryFilePath
 * @param {Settings} [settings]
 * @returns {Promise<string>} code
 */
async function bundleCode(entryFilePath, settings) {
  settings = settings || {verbose: false};

  let bundle = null;

  try {
    bundle = await rollup({
      input: entryFilePath,
      plugins: [resolve()]
    });

    const code = await generateOutput(bundle);

    if (settings.verbose) {
      console.log();
      console.log(`${code.length} characters from ${path.basename(entryFilePath)}:`);
      console.log();
      console.log(code);
    }

    return code;
  } finally {
    if (bundle) {
      await bundle.close();
    }
  }
}

async function generateOutput(bundle) {
  const { output } = await bundle.generate({
    format: 'iife',
    plugins: [
      terser({
        module: true,
        ecma: '2022',
        compress: {
          negate_iife: false,
        }
      })
    ]
  });

  for (const chunkOrAsset of output) {
    if (chunkOrAsset.type === 'chunk') {
      return chunkOrAsset.code;
    }
  }

  console.error('No chunks generated by rollup', output);
  throw new Error('No chunks generated by rollup');
}
